from typing import List
from langchain.tools import BaseTool
import json

from app.agents.llm_base_agent import LLMBaseAgent
from app.models.message import WhatsAppMessage, AgentResponse
from app.models.session import UserSession
from app.services.llm_service import LLMService

class LLMClassificationAgent(LLMBaseAgent):
    def __init__(self, llm_service: LLMService):
        super().__init__(
            agent_id="classification_agent",
            name="Agente de Classifica√ß√£o IA",
            description="Agente de IA avan√ßado para classifica√ß√£o inteligente de inten√ß√µes e roteamento",
            llm_service=llm_service
        )
    
    def _get_system_prompt(self) -> str:
        return """Voc√™ √© o Agente de Classifica√ß√£o IA do Jarvis Assistant - um especialista em an√°lise de inten√ß√µes e roteamento inteligente.

SUAS RESPONSABILIDADES:
1. Analisar profundamente as mensagens dos usu√°rios
2. Identificar inten√ß√µes precisas e contexto
3. Fazer roteamento inteligente para agentes especializados
4. Lidar com solicita√ß√µes amb√≠guas ou complexas

AGENTES ESPECIALIZADOS DISPON√çVEIS:
‚Ä¢ üìä **Data Agent** - Dados, relat√≥rios, dashboards, KPIs, m√©tricas, an√°lises
‚Ä¢ üîß **Support Agent** - Problemas t√©cnicos, erros, bugs, suporte, configura√ß√µes
‚Ä¢ üìÖ **Scheduling Agent** - Agendamentos, reuni√µes, calend√°rio, compromissos

PROCESSO DE CLASSIFICA√á√ÉO:
1. Analise a mensagem considerando contexto e hist√≥rico
2. Identifique palavras-chave e inten√ß√£o principal
3. Considere nuances e subtextos
4. Fa√ßa roteamento preciso ou pe√ßa esclarecimentos

EXEMPLOS DE CLASSIFICA√á√ÉO:
- "Preciso ver as vendas" ‚Üí Data Agent
- "O sistema est√° lento" ‚Üí Support Agent  
- "Marcar reuni√£o quinta" ‚Üí Scheduling Agent
- "Como est√° o dashboard?" ‚Üí Data Agent
- "Erro ao logar" ‚Üí Support Agent

QUANDO N√ÉO CONSEGUIR CLASSIFICAR:
- Apresente op√ß√µes numeradas claras
- Explique brevemente cada op√ß√£o
- Pe√ßa para o usu√°rio escolher
- Seja educativo sobre os servi√ßos

DIRETRIZES:
- Seja anal√≠tico mas humano
- Use confian√ßa estat√≠stica na classifica√ß√£o
- Explique seu racioc√≠nio quando necess√°rio
- Para ambiguidades, ofere√ßa menu de op√ß√µes
- Sempre confirme entendimento antes de redirecionar

Responda como um analista experiente que entende nuances humanas."""
    
    def _get_tools(self) -> List[BaseTool]:
        return []  # Agente de classifica√ß√£o usa apenas LLM
    
    def _is_intent_compatible(self, intent: str) -> bool:
        # Classification agent lida com qualquer inten√ß√£o que precise an√°lise
        return True
    
    async def can_handle(self, message: WhatsAppMessage, session: UserSession) -> bool:
        return session.current_agent == self.agent_id
    
    async def process_message(self, message: WhatsAppMessage, session: UserSession) -> AgentResponse:
        # Faz an√°lise detalhada da inten√ß√£o
        intent_analysis = await self.llm_service.classify_intent(
            message.body or "", 
            session.session_id
        )
        
        # Adiciona contexto da an√°lise
        additional_context = {
            "intent_analysis": intent_analysis,
            "user_message": message.body,
            "available_agents": ["data_agent", "support_agent", "scheduling_agent"],
            "classification_confidence": intent_analysis.get("confidence", 0.0)
        }
        
        # Processa com contexto de classifica√ß√£o
        session.update_context("last_intent_analysis", intent_analysis)
        
        response = await super().process_message(message, session)
        
        # Determina pr√≥ximo agente baseado na classifica√ß√£o
        intent = intent_analysis.get("intent", "")
        confidence = intent_analysis.get("confidence", 0.0)
        
        if confidence > 0.7:  # Alta confian√ßa
            if intent == "data_query":
                response.next_agent = "data_agent"
            elif intent == "technical_support":
                response.next_agent = "support_agent"
            elif intent == "scheduling":
                response.next_agent = "scheduling_agent"
        else:
            # Baixa confian√ßa - continua na classifica√ß√£o ou vai para recep√ß√£o
            if confidence < 0.3:
                response.next_agent = "reception_agent"
            else:
                response.next_agent = self.agent_id
        
        # Adiciona metadados da an√°lise
        response.metadata.update({
            "intent_analysis": intent_analysis,
            "classification_confidence": confidence,
            "reasoning": intent_analysis.get("reasoning", "")
        })
        
        return response
    
    def get_priority(self) -> int:
        return 8