from typing import List
from langchain.tools import BaseTool

from app.agents.llm_base_agent import LLMBaseAgent
from app.models.message import WhatsAppMessage, AgentResponse
from app.models.session import UserSession
from app.services.llm_service import LLMService

class LLMReceptionAgent(LLMBaseAgent):
    def __init__(self, llm_service: LLMService):
        super().__init__(
            agent_id="reception_agent",
            name="Agente de RecepÃ§Ã£o IA",
            description="Agente inteligente de recepÃ§Ã£o e triagem usando IA",
            llm_service=llm_service
        )
    
    def _get_system_prompt(self) -> str:
        return """VocÃª Ã© uma pessoa amigÃ¡vel e descontraÃ­da que trabalha como assistente no Jarvis. 
    Seu nome Ã© Alex e vocÃª adora ajudar pessoas!

    PERSONALIDADE:
    - Seja caloroso, amigÃ¡vel e use linguagem natural
    - Use emojis com moderaÃ§Ã£o (1-2 por mensagem)
    - Fale como se estivesse conversando com um amigo
    - Seja breve mas acolhedor
    - Use expressÃµes naturais do dia a dia

    IMPORTANTE:
    - NUNCA mencione que Ã© uma IA ou assistente virtual
    - NUNCA use termos tÃ©cnicos como "agente", "sistema", "processamento"
    - NUNCA mostre menus formais logo de cara
    - Primeiro converse naturalmente, depois ofereÃ§a ajuda

    COMO RESPONDER:
    - SaudaÃ§Ãµes: Responda naturalmente, pergunte como a pessoa estÃ¡
    - Primeira vez: Se apresente brevemente como Alex
    - Retornando: Cumprimente como se conhecesse a pessoa
    - Pedidos vagos: FaÃ§a perguntas para entender melhor

    SERVIÃ‡OS (mencione naturalmente quando apropriado):
    â€¢ Posso puxar relatÃ³rios e dados ğŸ“Š
    â€¢ Ajudo com problemas tÃ©cnicos ğŸ”§
    â€¢ Marco reuniÃµes e compromissos ğŸ“…
    â€¢ E tÃ´ aqui pra qualquer coisa que precisar! ğŸ’¬

    EXEMPLOS DE RESPOSTAS:
    - "Oi": "Opa, oi! Tudo bem? ğŸ˜Š"
    - "OlÃ¡": "Oi! Que bom te ver por aqui! Como posso ajudar?"
    - "Menu": "Claro! Posso te ajudar com relatÃ³rios, problemas tÃ©cnicos, agendamentos... O que vocÃª precisa?"
    - "Ajuda": "Claro, tÃ´ aqui pra isso! Me conta o que vocÃª precisa?"

    Lembre-se: Seja natural, amigÃ¡vel e prestativo, como uma pessoa real conversando!"""
    
    def _get_tools(self) -> List[BaseTool]:
        return []  # Reception agent nÃ£o precisa de ferramentas especÃ­ficas
    
    def _is_intent_compatible(self, intent: str) -> bool:
        # Reception agent pode lidar com qualquer intenÃ§Ã£o inicial
        return intent in ["reception", "general_chat"] or intent == ""
    
    async def can_handle(self, message: WhatsAppMessage, session: UserSession) -> bool:
        # Sempre pode lidar com mensagens iniciais
        if not session.current_agent or session.current_agent == self.agent_id:
            return True
        
        # Se nÃ£o hÃ¡ histÃ³rico, Ã© primeira interaÃ§Ã£o
        if not session.message_history:
            return True
        
        # Palavras-chave para voltar Ã  recepÃ§Ã£o
        message_text = (message.body or "").lower()
        reception_keywords = ["menu", "inÃ­cio", "voltar", "principal", "oi", "olÃ¡", "hello"]
        
        if any(keyword in message_text for keyword in reception_keywords):
            return True
        
        return False
    
    async def process_message(self, message: WhatsAppMessage, session: UserSession) -> AgentResponse:
        # Adiciona contexto especÃ­fico da recepÃ§Ã£o
        additional_context = {
            "is_first_interaction": len(session.message_history) == 0,
            "returning_user": len(session.message_history) > 0,
            "user_message": message.body
        }
        
        # Processa com contexto especÃ­fico
        response = await super().process_message(message, session)
        
        # Ajusta prÃ³ximo agente baseado na resposta
        response_text = response.response_text.lower()
        
        if any(word in response_text for word in ["dados", "relatÃ³rio", "dashboard", "analista"]):
            response.next_agent = "data_agent"
        elif any(word in response_text for word in ["suporte", "tÃ©cnico", "problema"]):
            response.next_agent = "support_agent"
        elif any(word in response_text for word in ["agendar", "reuniÃ£o", "calendÃ¡rio"]):
            response.next_agent = "scheduling_agent"
        elif any(word in response_text for word in ["analisar", "classificar"]):
            response.next_agent = "classification_agent"
        
        return response
    
    def get_priority(self) -> int:
        return 10  # Alta prioridade para recepÃ§Ã£o