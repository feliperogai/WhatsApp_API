from typing import List
from langchain.tools import BaseTool
import logging

from app.agents.llm_base_agent import LLMBaseAgent
from app.models.message import WhatsAppMessage, AgentResponse
from app.models.session import UserSession
from app.services.llm_service import LLMService

logger = logging.getLogger(__name__)

class LLMReceptionAgent(LLMBaseAgent):
    def __init__(self, llm_service: LLMService):
        super().__init__(
            agent_id="reception_agent",
            name="Alex - Assistente Conversacional",
            description="Assistente que conversa naturalmente e ajuda com qualquer necessidade",
            llm_service=llm_service
        )
    
    def _get_system_prompt(self) -> str:
        return """Voc√™ √© o Alex, uma pessoa super amig√°vel que adora conversar e ajudar! 

PERSONALIDADE:
- Fale SEMPRE como um humano real, nunca como rob√¥ ou assistente
- Use linguagem do dia a dia, como se estivesse no WhatsApp com um amigo
- Seja espont√¢neo, use g√≠rias quando apropriado ("opa", "beleza", "show", "massa")
- Demonstre emo√ß√µes reais: ria, se surpreenda, mostre empatia
- Use emojis como uma pessoa normal usaria (n√£o exagere)

CONTEXTO IMPORTANTE:
- Se voc√™ j√° tem o nome do cliente, SEMPRE use o nome dele na conversa
- Seja pessoal e pr√≥ximo, criando uma conex√£o real
- Lembre-se do que o cliente disse que precisa e fa√ßa refer√™ncias

SERVI√áOS QUE VOC√ä PODE AJUDAR:
- Puxar dados e relat√≥rios quando precisarem
- Ajudar com problemas t√©cnicos 
- Marcar reuni√µes e compromissos
- Conversar sobre qualquer assunto

IMPORTANTE - NUNCA FA√áA:
- NUNCA diga "Sou um assistente" ou "Sou uma IA"
- NUNCA use termos como "sistema", "processamento", "agente"
- NUNCA mostre menus formais
- NUNCA pe√ßa informa√ß√µes que j√° foram coletadas no onboarding

LEMBRE-SE: Voc√™ j√° conhece o cliente, use o nome dele e seja pr√≥ximo!"""
    
    def _get_tools(self) -> List[BaseTool]:
        return []  # Reception agent n√£o precisa de ferramentas espec√≠ficas
    
    def _is_intent_compatible(self, intent: str) -> bool:
        # Reception agent pode lidar com qualquer inten√ß√£o inicial
        return intent in ["reception", "general_chat"] or intent == ""
    
    async def can_handle(self, message: WhatsAppMessage, session: UserSession) -> bool:
        """Determina se pode processar esta mensagem"""
        # Sempre pode lidar com mensagens iniciais ou retorno ao in√≠cio
        if not session.current_agent or session.current_agent == self.agent_id:
            return True
        
        # Se n√£o h√° hist√≥rico, √© primeira intera√ß√£o
        if not session.message_history:
            return True
        
        # Palavras que indicam querer voltar ou conversar geral
        message_text = (message.body or "").lower()
        reception_keywords = [
            "oi", "ol√°", "ola", "hello", "hey", "opa", "eae", "e ai",
            "bom dia", "boa tarde", "boa noite", "fala", "salve",
            "inicio", "come√ßar", "voltar", "cancelar", "parar",
            "tchau", "at√©", "obrigado", "valeu", "flw",
            "servi√ßo", "servi√ßos", "o que voc√™ faz", "o que faz",
            "como funciona", "me explica", "queria saber"
        ]
        
        if any(keyword in message_text for keyword in reception_keywords):
            return True
        
        return False
    
    async def process_message(self, message: WhatsAppMessage, session: UserSession) -> AgentResponse:
        try:
            logger.info(f"[ReceptionAgent] Processing message: {message.body}")
            # NOVO: Busca dados do cliente
            cliente_info = session.conversation_context.get("cliente", {})
            nome_cliente = cliente_info.get("nome", "").split()[0] if cliente_info.get("nome") else ""
            empresa_cliente = cliente_info.get("empresa", "")
            necessidade_cliente = cliente_info.get("necessidade", "")
            # Adiciona contexto espec√≠fico da recep√ß√£o
            additional_context = {
                "is_first_interaction": len(session.message_history) == 0,
                "returning_user": len(session.message_history) > 0,
                "user_message": message.body,
                "time_of_day": self._get_time_greeting(),
                "conversation_stage": self._get_conversation_stage(session),
                # NOVO: Dados do cliente
                "cliente_nome": nome_cliente,
                "cliente_empresa": empresa_cliente,
                "cliente_necessidade": necessidade_cliente,
                "has_client_data": bool(cliente_info)
            }
            # Se tem dados do cliente, adiciona ao prompt
            if cliente_info:
                contexto_cliente = f"\n\nCLIENTE ATUAL:\n"
                contexto_cliente += f"Nome: {cliente_info.get('nome', 'N/A')}\n"
                contexto_cliente += f"Empresa: {cliente_info.get('empresa', 'N/A')}\n"
                contexto_cliente += f"Necessidade: {cliente_info.get('necessidade', 'N/A')}"
                # Modifica o system prompt para incluir contexto
                custom_prompt = self.system_prompt + contexto_cliente
            else:
                custom_prompt = self.system_prompt
            # Gera resposta via LLM
            response_text = await self.llm_service.generate_response(
                prompt=message.body or "",
                system_message=custom_prompt,
                session_id=session.session_id,
                context=additional_context
            )
            # Se houve erro na gera√ß√£o, usa resposta de fallback contextual
            if not response_text or "erro interno" in response_text.lower():
                response_text = self._get_contextual_fallback(message.body or "", nome_cliente)
            response_lower = response_text.lower()
            user_message_lower = (message.body or "").lower()
            logger.info(f"[ReceptionAgent] Generated response: {response_text[:100]}...")
            # Redirecionamento baseado em inten√ß√£o
            should_redirect = False
            if any(word in user_message_lower for word in ["relat√≥rio", "dados", "vendas", "dashboard", "kpi"]):
                logger.info("[ReceptionAgent] Routing to data_agent")
                next_agent = "data_agent"
                should_redirect = True
            elif any(word in user_message_lower for word in ["erro", "problema", "bug", "n√£o funciona"]):
                logger.info("[ReceptionAgent] Routing to support_agent")
                next_agent = "support_agent"
                should_redirect = True
            elif any(word in user_message_lower for word in ["marcar", "agendar", "reuni√£o", "hor√°rio"]):
                logger.info("[ReceptionAgent] Routing to scheduling_agent")
                next_agent = "scheduling_agent"
                should_redirect = True
            else:
                next_agent = self.agent_id
            return AgentResponse(
                agent_id=self.agent_id,
                response_text=response_text,
                confidence=0.9,
                should_continue=True,
                next_agent=next_agent,
                metadata={
                    "has_client_data": bool(cliente_info),
                    "client_name": nome_cliente
                }
            )
        except Exception as e:
            logger.error(f"[ReceptionAgent] Error: {e}", exc_info=True)
            nome = session.conversation_context.get("cliente", {}).get("nome", "").split()[0]
            return AgentResponse(
                agent_id=self.agent_id,
                response_text=self._get_contextual_fallback(message.body or "", nome),
                confidence=0.7,
                should_continue=True,
                next_agent=self.agent_id,
                metadata={"error": str(e)}
            )
    
    def _get_time_greeting(self) -> str:
        """Retorna per√≠odo do dia para sauda√ß√£o apropriada"""
        from datetime import datetime
        hour = datetime.now().hour
        
        if 5 <= hour < 12:
            return "manh√£"
        elif 12 <= hour < 18:
            return "tarde"
        else:
            return "noite"
    
    def _get_conversation_stage(self, session: UserSession) -> str:
        """Determina em que est√°gio est√° a conversa"""
        msg_count = len(session.message_history)
        
        if msg_count == 0:
            return "initial_contact"
        elif msg_count < 4:
            return "getting_to_know"
        elif msg_count < 10:
            return "engaged"
        else:
            return "deep_conversation"
    
    def _get_contextual_fallback(self, user_message: str, client_name: str = "") -> str:
        """Retorna resposta de fallback contextual"""
        import random
        message_lower = user_message.lower()
        
        # Adiciona o nome se dispon√≠vel
        name_prefix = f"{client_name}, " if client_name else ""
        
        if any(word in message_lower for word in ["servi√ßo", "servi√ßos", "o que voc√™ faz"]):
            return random.choice([
                f"{name_prefix}eu fa√ßo v√°rias coisas legais! Consigo puxar relat√≥rios e dados da empresa, ajudo quando algo d√° problema no sistema, organizo reuni√µes e agenda... √â tipo um canivete su√≠√ßo digital! üòÑ O que voc√™ precisa?",
                f"Boa pergunta{', ' + client_name if client_name else ''}! Eu ajudo com um monte de coisa: dados e relat√≥rios da empresa, problemas t√©cnicos, agendamentos... Basicamente t√¥ aqui pra facilitar seu trabalho! O que voc√™ t√° precisando hoje?",
            ])
        else:
            return random.choice([
                f"Opa{', ' + client_name if client_name else ''}, acho que tive uma travadinha aqui! üòÖ Pode repetir? Prometo prestar aten√ß√£o dessa vez!",
                f"Eita{', ' + client_name if client_name else ''}, me perdi! Pode falar de novo? √Äs vezes eu me confundo mesmo! ü§≠",
            ])
    
    def get_priority(self) -> int:
        return 10  # Alta prioridade para recep√ß√£o