agent_1_py = ""
from app.agents.base_agent import BaseAgent
from app.models.message import WhatsAppMessage, AgentResponse
from app.models.session import UserSession
import re

class ReceptionAgent(BaseAgent):
    def __init__(self):
        super().__init__(
            agent_id="reception_agent",
            name="Agente de RecepÃ§Ã£o", 
            description="Agente responsÃ¡vel por receber e fazer triagem inicial"
        )
        self.greetings = ["oi", "olÃ¡", "hello", "bom dia", "boa tarde", "boa noite", "iniciar"]
    
    async def can_handle(self, message: WhatsAppMessage, session: UserSession) -> bool:
        # Sempre pode lidar com mensagens iniciais ou quando nÃ£o hÃ¡ agente ativo
        if not session.current_agent or session.current_agent == self.agent_id:
            return True
        
        # Verifica se Ã© uma saudaÃ§Ã£o
        if message.body and any(greeting in message.body.lower() for greeting in self.greetings):
            return True
            
        return False
    
    async def process_message(self, message: WhatsAppMessage, session: UserSession) -> AgentResponse:
        user_message = message.body.lower() if message.body else ""
        
        # Se Ã© primeira interaÃ§Ã£o
        if not session.message_history:
            response_text = f'''ğŸ‘‹ OlÃ¡! Bem-vindo ao Jarvis Assistant!

Sou seu assistente virtual e posso te ajudar com:
â€¢ ğŸ“Š Consultas e relatÃ³rios
â€¢ ğŸ”§ Suporte tÃ©cnico
â€¢ ğŸ“‹ Agendamentos e tarefas
â€¢ ğŸ’¬ Conversas gerais

Como posso te ajudar hoje?'''
            
            # Define prÃ³ximo agente baseado na necessidade
            next_agent = "classification_agent"
            
        elif any(greeting in user_message for greeting in self.greetings):
            response_text = "OlÃ¡ novamente! Em que posso ajudÃ¡-lo?"
            next_agent = "classification_agent"
        else:
            # AnÃ¡lise simples da intenÃ§Ã£o
            if any(word in user_message for word in ["relatÃ³rio", "dados", "dashboard", "vendas"]):
                response_text = "Entendi que vocÃª precisa de informaÃ§Ãµes ou relatÃ³rios. Vou te conectar com nosso especialista!"
                next_agent = "data_agent"
            elif any(word in user_message for word in ["problema", "erro", "nÃ£o funciona", "suporte"]):
                response_text = "Vou conectar vocÃª com nosso suporte tÃ©cnico!"
                next_agent = "support_agent"
            elif any(word in user_message for word in ["agendar", "reuniÃ£o", "compromisso", "calendÃ¡rio"]):
                response_text = "Vou te ajudar com agendamentos!"
                next_agent = "scheduling_agent"
            else:
                response_text = "Deixe-me analisar melhor sua solicitaÃ§Ã£o..."
                next_agent = "classification_agent"
        
        return AgentResponse(
            agent_id=self.agent_id,
            response_text=response_text,
            confidence=0.9,
            should_continue=True,
            next_agent=next_agent
        )
    
    def get_priority(self) -> int:
        return 10  # Alta prioridade para recepÃ§Ã£o
