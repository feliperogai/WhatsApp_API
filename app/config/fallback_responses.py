import random
from typing import List, Dict

class FallbackResponses:
    """Respostas fallback organizadas por categoria"""
    
    # Sauda√ß√µes iniciais
    GREETINGS = [
        "Opa! E a√≠, tudo bem? üòä",
        "Oi oi! Como voc√™ t√°?",
        "Fala! Tudo certo a√≠?",
        "Hey! Que bom te ver por aqui!",
        "Oi! Tava esperando voc√™ aparecer! Como t√°?",
        "E a√≠! Beleza? Como posso ajudar?",
        "Salve! Tudo tranquilo?",
        "Ol√°! Como t√° seu dia hoje?",
        "Opa, tudo bem? Que legal voc√™ por aqui!",
        "Oi! Tudo joia? Em que posso ajudar?"
    ]
    
    # Quando perguntam sobre servi√ßos
    SERVICES_INFO = [
        "Ah, eu fa√ßo v√°rias coisas legais! Consigo puxar relat√≥rios e dados da empresa, ajudo quando algo d√° problema no sistema, organizo reuni√µes e agenda... √â tipo um canivete su√≠√ßo digital! üòÑ Tem algo espec√≠fico que voc√™ precisa?",
        
        "Boa pergunta! Eu ajudo com um monte de coisa: dados e relat√≥rios da empresa, problemas t√©cnicos, agendamentos... Basicamente t√¥ aqui pra facilitar seu trabalho! O que voc√™ t√° precisando hoje?",
        
        "Ent√£o, eu sou tipo aquele amigo que resolve as paradas chatas do trabalho! Puxo relat√≥rios, resolvo problemas do sistema, marco reuni√µes... Me conta, o que seria √∫til pra voc√™ agora?",
        
        "Legal que voc√™ quer saber! Eu fa√ßo um monte de coisa √∫til aqui. Consigo puxar relat√≥rios e dados da empresa pra voc√™, ajudo quando o sistema d√° problema, organizo sua agenda... √â tipo ter um amigo que resolve essas coisas chatas do trabalho, sabe? Tem algo espec√≠fico que voc√™ t√° precisando?",
        
        "Ah, eu ajudo com v√°rias coisas! Posso puxar relat√≥rios e dados pra voc√™, ajudo se tiver algum problema t√©cnico, marco reuni√µes... Basicamente t√¥ aqui pra facilitar sua vida! O que voc√™ t√° precisando agora?"
    ]
    
    # Pedidos de ajuda gen√©ricos
    HELP_RESPONSES = [
        "Claro! Me conta o que voc√™ precisa que eu te ajudo! üòä",
        "Opa, t√¥ aqui pra isso! O que t√° precisando?",
        "Com certeza! Pode falar, como posso ajudar?",
        "Sim! Me diz a√≠ o que voc√™ precisa!",
        "L√≥gico! Conta comigo! O que seria?",
        "Pode deixar! No que posso te ajudar?"
    ]
    
    # Quando n√£o entende
    CONFUSION_RESPONSES = [
        "Hmm, n√£o entendi bem... Pode me explicar melhor? ü§î",
        "Opa, acho que n√£o captei. Pode falar de outro jeito?",
        "Desculpa, n√£o peguei essa. Me conta mais?",
        "Putz, n√£o entendi direito. Voc√™ quer dados, suporte ou marcar algo?",
        "Eita, me perdi aqui! üòÖ Pode repetir?",
        "N√£o entendi muito bem, mas t√¥ aqui pra ajudar! Me explica melhor?",
        "Xiii, n√£o captei! Pode dar mais detalhes?",
        "Ops, acho que me confundi! Pode explicar de novo?"
    ]
    
    # Erros t√©cnicos (quando o sistema falha)
    TECHNICAL_ERRORS = [
        "Opa, tive uma travadinha aqui! üòÖ Pode repetir? Prometo prestar aten√ß√£o dessa vez!",
        "Eita, bugou aqui! üêõ Me d√° um segundinho que j√° volto!",
        "Ops, travei! üòµ Tenta de novo? Prometo que vou funcionar!",
        "Xiii, deu ruim aqui! Mas calma, j√° t√¥ voltando! üîß",
        "Poxa, tive um probleminha t√©cnico. Pode repetir? üôè",
        "Desculpa, deu uma travada! Mas t√¥ de volta! O que voc√™ precisa?",
        "Eita, pequeno problema t√©cnico! Mas j√° resolvi! Como posso ajudar?",
        "Foi mal, deu um bug aqui! Mas j√° t√¥ funcionando! Pode falar!",
        "Ops, sistema deu uma falhada! Mas j√° voltou! Me conta o que precisa?"
    ]
    
    # Timeouts (quando demora muito)
    TIMEOUT_RESPONSES = [
        "Opa, demorei demais pensando aqui! üòÖ Pode repetir? Vou ser mais r√°pido!",
        "Desculpa a demora! Tava processando muita coisa! O que voc√™ disse mesmo?",
        "Eita, me enrolei aqui! Pode falar de novo? Prometo ser mais √°gil!",
        "Foi mal pela demora! Tava resolvendo umas coisas aqui! Como posso ajudar?",
        "Putz, demorei n√©? üòÖ Pode repetir? Agora t√¥ ligado!"
    ]
    
    # Despedidas
    FAREWELLS = [
        "Tchau! Foi √≥timo falar com voc√™! üëã",
        "At√© mais! Se cuida!",
        "Falou! Boa sorte a√≠! ‚ú®",
        "Tchau tchau! Aparece mais!",
        "At√©! Qualquer coisa me chama!",
        "Valeu pela conversa! At√© a pr√≥xima!",
        "At√© logo! Foi um prazer ajudar! üòä",
        "Tchau! Bom resto de dia pra voc√™!"
    ]
    
    # Agradecimentos
    THANK_YOU_RESPONSES = [
        "Imagina! Sempre que precisar! üòä",
        "Por nada! Foi um prazer!",
        "Que isso! Tamo junto! ü§ù",
        "De nada! Conta comigo!",
        "Valeu voc√™! Fico feliz em ajudar!",
        "Nada! Precisando, s√≥ chamar!",
        "Magina! Sempre √†s ordens!",
        "Que nada! √â um prazer ajudar!"
    ]
    
    # Quando pedem dados/relat√≥rios
    DATA_REQUESTS = [
        "Ah, voc√™ quer ver dados! Legal! Me conta mais: vendas, clientes, performance... O que seria √∫til pra voc√™?",
        "Show! Adoro mostrar n√∫meros! üìä Quer ver vendas? Clientes? Ou alguma m√©trica espec√≠fica?",
        "Opa, vamos aos dados! O que voc√™ quer saber? Vendas do m√™s? Comparativo? Performance?",
        "Relat√≥rios! Boa! Temos v√°rias op√ß√µes... Vendas, clientes, KPIs... Por onde quer come√ßar?",
        "Beleza! Vou puxar os dados! Me diz o que especificamente voc√™ precisa ver?"
    ]
    
    # Quando relatam problemas
    PROBLEM_REPORTS = [
        "Eita, que chato! Me conta direitinho o que t√° acontecendo que eu te ajudo!",
        "Poxa, problema t√©cnico √© fogo! O que t√° dando erro a√≠?",
        "Xiii, vamos resolver isso! Me explica o que aconteceu?",
        "Problema? Calma que a gente resolve! O que t√° pegando?",
        "Puts, que saco! Mas vamos l√°, me conta tudo sobre o erro!",
        "Ih, complicou a√≠? Relaxa, vamos resolver! O que t√° rolando?"
    ]
    
    @staticmethod
    def get_response(category: str) -> str:
        """Retorna uma resposta aleat√≥ria da categoria especificada"""
        responses_map = {
            "greeting": FallbackResponses.GREETINGS,
            "services": FallbackResponses.SERVICES_INFO,
            "help": FallbackResponses.HELP_RESPONSES,
            "confusion": FallbackResponses.CONFUSION_RESPONSES,
            "error": FallbackResponses.TECHNICAL_ERRORS,
            "timeout": FallbackResponses.TIMEOUT_RESPONSES,
            "farewell": FallbackResponses.FAREWELLS,
            "thanks": FallbackResponses.THANK_YOU_RESPONSES,
            "data": FallbackResponses.DATA_REQUESTS,
            "problem": FallbackResponses.PROBLEM_REPORTS
        }
        
        responses = responses_map.get(category, FallbackResponses.CONFUSION_RESPONSES)
        return random.choice(responses)
    
    @staticmethod
    def get_contextual_response(user_input: str, error_type: str = None) -> str:
        """Retorna uma resposta apropriada baseada no contexto"""
        input_lower = user_input.lower()
        
        # Analisa a entrada para determinar a melhor categoria
        if any(word in input_lower for word in ["oi", "ol√°", "ola", "bom dia", "boa tarde", "boa noite", "hey", "opa"]):
            return FallbackResponses.get_response("greeting")
        
        elif any(word in input_lower for word in ["servi√ßo", "servi√ßos", "o que voc√™ faz", "o que faz", "funcionalidades", "o que oferece"]):
            return FallbackResponses.get_response("services")
        
        elif any(word in input_lower for word in ["ajuda", "ajudar", "me ajuda", "socorro", "help"]):
            return FallbackResponses.get_response("help")
        
        elif any(word in input_lower for word in ["tchau", "at√©", "adeus", "bye", "flw", "falou"]):
            return FallbackResponses.get_response("farewell")
        
        elif any(word in input_lower for word in ["obrigado", "obrigada", "valeu", "thanks", "agrade√ßo"]):
            return FallbackResponses.get_response("thanks")
        
        elif any(word in input_lower for word in ["relat√≥rio", "dados", "vendas", "dashboard", "kpi", "m√©trica"]):
            return FallbackResponses.get_response("data")
        
        elif any(word in input_lower for word in ["erro", "problema", "bug", "travou", "n√£o funciona", "falha"]):
            return FallbackResponses.get_response("problem")
        
        else:
            # Se n√£o identificar o contexto, usa o tipo de erro ou confusion
            if error_type == "timeout":
                return FallbackResponses.get_response("timeout")
            elif error_type in ["error", "exception"]:
                return FallbackResponses.get_response("error")
            else:
                return FallbackResponses.get_response("confusion")


# Fun√ß√£o helper para uso f√°cil
def get_fallback_response(user_input: str, error_type: str = None) -> str:
    """
    Retorna uma resposta fallback apropriada.
    
    Args:
        user_input: Mensagem original do usu√°rio
        error_type: Tipo de erro (timeout, error, exception, etc.)
    
    Returns:
        Resposta natural e contextual
    """
    return FallbackResponses.get_contextual_response(user_input, error_type)