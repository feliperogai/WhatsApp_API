from typing import Dict, List, Any

class DataValidationConfig:
    """Configura√ß√µes centralizadas para valida√ß√£o de dados"""
    
    # Ordem obrigat√≥ria de coleta
    COLLECTION_ORDER = [
        "cnpj",          # 1¬∫ - Sempre primeiro
        "empresa",       # 2¬∫ - Nome da empresa
        "nome",          # 3¬∫ - Nome do usu√°rio
        "email",         # 4¬∫ - Email corporativo
        "cargo"          # 5¬∫ - Cargo na empresa
    ]
    
    # Campos obrigat√≥rios para liberar acesso
    REQUIRED_FIELDS = {
        "empresa": ["cnpj", "empresa"],  # Para identificar empresa
        "usuario": ["nome", "email", "cargo"]  # Para identificar usu√°rio
    }
    
    # Regras de valida√ß√£o
    VALIDATION_RULES = {
        "cnpj": {
            "min_length": 14,
            "max_length": 18,  # Com formata√ß√£o
            "pattern": r'^\d{2}\.?\d{3}\.?\d{3}\/?\d{4}-?\d{2}$',
            "custom_validator": "validate_cnpj",
            "error_messages": {
                "invalid": "‚ùå CNPJ inv√°lido. Por favor, verifique os d√≠gitos e tente novamente.",
                "format": "‚ùå Formato inv√°lido. Use: XX.XXX.XXX/XXXX-XX",
                "repeated": "‚ùå CNPJ n√£o pode ter todos os n√∫meros iguais."
            }
        },
        "empresa": {
            "min_length": 3,
            "max_length": 100,
            "error_messages": {
                "too_short": "‚ùå Nome da empresa muito curto. Digite o nome completo.",
                "too_long": "‚ùå Nome da empresa muito longo. Use at√© 100 caracteres."
            }
        },
        "nome": {
            "min_length": 3,
            "max_length": 100,
            "min_words": 2,  # Nome e sobrenome
            "error_messages": {
                "too_short": "‚ùå Nome muito curto.",
                "incomplete": "‚ö†Ô∏è Por favor, informe seu nome completo (nome e sobrenome).",
                "invalid_chars": "‚ùå Nome n√£o pode conter n√∫meros ou caracteres especiais."
            }
        },
        "email": {
            "pattern": r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$',
            "error_messages": {
                "invalid": "‚ùå Email inv√°lido. Use o formato: nome@empresa.com",
                "domain": "‚ùå Dom√≠nio de email inv√°lido."
            }
        },
        "cargo": {
            "min_length": 3,
            "max_length": 50,
            "error_messages": {
                "too_short": "‚ùå Cargo muito curto. Digite o cargo completo.",
                "too_long": "‚ùå Cargo muito longo. Use at√© 50 caracteres."
            }
        }
    }
    
    # Mensagens de solicita√ß√£o
    REQUEST_MESSAGES = {
        "cnpj": [
            "üìã Antes de mostrar os dados, preciso do CNPJ da empresa. Pode informar?",
            "Para liberar o acesso aos dados, qual o CNPJ da empresa?",
            "Primeiro, me passa o CNPJ da empresa, por favor.",
            "Preciso validar o CNPJ da empresa. Qual √©?",
            "üìä Para acessar os relat√≥rios, informe o CNPJ da empresa:"
        ],
        "empresa": [
            "Agora, qual o nome da empresa?",
            "√ìtimo! Agora me diz o nome da empresa.",
            "Perfeito! Qual √© o nome da empresa?",
            "Legal! E o nome da empresa √©...?",
            "Show! Me informa o nome completo da empresa:"
        ],
        "nome": [
            "Excelente! Agora preciso do seu nome completo.",
            "√ìtimo! Como voc√™ se chama? (nome completo)",
            "Perfeito! Qual o seu nome completo?",
            "Show! Me diz seu nome completo, por favor.",
            "Legal! Agora seu nome completo:"
        ],
        "email": [
            "Qual seu email corporativo?",
            "Me passa seu email de trabalho, por favor.",
            "Preciso do seu email para enviar os relat√≥rios. Qual √©?",
            "E seu email profissional?",
            "Agora, qual seu melhor email para contato?"
        ],
        "cargo": [
            "Para finalizar, qual o seu cargo na empresa?",
            "√öltimo dado: qual sua fun√ß√£o/cargo?",
            "E qual cargo voc√™ ocupa na empresa?",
            "Por fim, me diz seu cargo, por favor.",
            "Para completar o cadastro, qual sua posi√ß√£o na empresa?"
        ]
    }
    
    # Mensagens de sucesso
    SUCCESS_MESSAGES = {
        "cnpj": "‚úÖ CNPJ validado com sucesso!",
        "empresa": "‚úÖ Empresa registrada!",
        "nome": "‚úÖ Nome cadastrado!",
        "email": "‚úÖ Email confirmado!",
        "cargo": "‚úÖ Cargo registrado!",
        "complete": "üéâ Parab√©ns {nome}! Acesso liberado para {empresa}!"
    }
    
    # Configura√ß√µes de seguran√ßa
    SECURITY_SETTINGS = {
        "block_personal_before_company": True,  # Bloqueia dados pessoais antes da empresa
        "require_valid_cnpj": True,  # Exige CNPJ v√°lido
        "require_corporate_email": False,  # Exige email corporativo (n√£o gmail, hotmail, etc)
        "session_timeout_minutes": 30,  # Timeout da sess√£o de coleta
        "max_validation_attempts": 5  # M√°ximo de tentativas para cada campo
    }
    
    # Dom√≠nios de email n√£o corporativos (se require_corporate_email = True)
    PUBLIC_EMAIL_DOMAINS = [
        "gmail.com", "hotmail.com", "outlook.com", "yahoo.com",
        "yahoo.com.br", "bol.com.br", "uol.com.br", "terra.com.br",
        "ig.com.br", "globo.com", "protonmail.com", "icloud.com"
    ]
    
    @classmethod
    def get_validation_rule(cls, field: str) -> Dict[str, Any]:
        """Retorna regra de valida√ß√£o para um campo"""
        return cls.VALIDATION_RULES.get(field, {})
    
    @classmethod
    def get_request_message(cls, field: str, index: int = 0) -> str:
        """Retorna mensagem de solicita√ß√£o para um campo"""
        messages = cls.REQUEST_MESSAGES.get(field, [f"Por favor, informe: {field}"])
        return messages[index % len(messages)]
    
    @classmethod
    def is_corporate_email(cls, email: str) -> bool:
        """Verifica se √© email corporativo"""
        if not cls.SECURITY_SETTINGS["require_corporate_email"]:
            return True
        
        domain = email.split('@')[-1].lower()
        return domain not in cls.PUBLIC_EMAIL_DOMAINS
    
    @classmethod
    def get_field_description(cls, field: str) -> str:
        """Retorna descri√ß√£o amig√°vel do campo"""
        descriptions = {
            "cnpj": "CNPJ da empresa",
            "empresa": "nome da empresa",
            "nome": "seu nome completo",
            "email": "seu email corporativo",
            "cargo": "seu cargo na empresa"
        }
        return descriptions.get(field, field)

# Exemplo de uso personalizado
class CustomDataValidationConfig(DataValidationConfig):
    """Configura√ß√£o personalizada para cliente espec√≠fico"""
    
    # Adiciona campo extra
    COLLECTION_ORDER = DataValidationConfig.COLLECTION_ORDER + ["departamento"]
    
    # Adiciona valida√ß√£o para o novo campo
    VALIDATION_RULES = {
        **DataValidationConfig.VALIDATION_RULES,
        "departamento": {
            "min_length": 2,
            "max_length": 50,
            "allowed_values": [
                "Vendas", "Marketing", "TI", "RH", "Financeiro",
                "Opera√ß√µes", "Log√≠stica", "Compras", "Jur√≠dico"
            ],
            "error_messages": {
                "invalid": "‚ùå Departamento inv√°lido. Escolha um dos departamentos dispon√≠veis."
            }
        }
    }
    
    # Adiciona mensagens para o novo campo
    REQUEST_MESSAGES = {
        **DataValidationConfig.REQUEST_MESSAGES,
        "departamento": [
            "Em qual departamento voc√™ trabalha?",
            "Qual o seu departamento na empresa?",
            "Me informa seu departamento:"
        ]
    }